%%%Cost function for the curve fitting program: minimises the cost over
%%%steady state and time courses

function y=CostFunAlphaUpGFPDownIAA(par)

%Load data
load('AlphaUpGFPDownIAA')
par=par.^2;
TS=1000;
%Run simulation to compute cost function
y0=0;
[~,yODE1]=ode15s(@ActiveAlphaUpGFPDownIAA,[0 TS],zeros(5,1),odeset('refine',10),0,0,par); %Simulating the system for the initial state
    
for j=1:length(Input)
    [t,yODE]=ode15s(@ActiveAlphaUpGFPDownIAA,[Time(1) TS],yODE1(end,:),odeset('refine',10),Input(j,1),Input(j,2),par);
    yEnd=yODE(:,end);        
    Y=binlin(t,yEnd,Time);
    K1=0; %Weight parameter for steady state values
    K2=0; %Weight parameter for second point (speed of response)
    y0=y0+sum((log(Y)-log(Data(:,j))).^2)+K1*((log(yEnd(end))-log(Data(end,j)))^2)+K2*(log(Y(2))-log(Data(2,j)))^2; %Cost function contribution of the first time series    
    %y0=y0+sum(abs(log(Y)-log(Data(:,j))));%+abs(log(yEnd(end))-log(Data(end,j)));
    if j==3
        AA=Y;
    elseif j==10
        BB=Y;
    elseif j==4
        CC=Y;
    elseif j==7
        DD=Y;
    end
end
K=20;
K3=0.3;
%y0=y0+K*(sum((log(AA)-log(BB)).^2)+sum((log(CC)-log(DD)).^2));
% y0=y0+K*((10-par(7)^(1/par(6))*par(2)/par(1))^2+(500-par(11)^(1/par(10))*par(4)/par(3))^2);
y0=y0+K3*(((200*par(1)/par(2))^(par(6))-K*par(7))^2+((5000*par(3)/par(4))^(par(10))-K*par(11))^2);


y=sqrt(y0);

end